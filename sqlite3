{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import libraries\n",
    "import sqlite3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Connection with db\n",
    "# Test.db is an example\n",
    "# db name can be anything \n",
    "conn=sqlite3.connect('Test2.db')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Cursor is like API between db and user which operates works with data\n",
    "cursor_obj=conn.cursor()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sqlite3.Cursor at 0x1537dc3cbc0>"
      ]
     },
     "execution_count": 178,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Before start, we try to delete any remains table if exists before by DROP\n",
    "# \"DROP TABLE IF EXISTS my_table\" is SQL code\n",
    "cursor_obj.execute(\"DROP TABLE IF EXISTS Test2\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create table by given column name\n",
    "# VARCHAR and CHAR are data type for column\n",
    "# VARCHAR(20) is like give 20 ch to fill, and if it is not fullfilled NOT pade the reset by space\n",
    "# CHAR(20) is like give 20 ch to fill, and if it is not fullfilled pade the reset by space(by blank character)\n",
    "# We can also add 'IF NOT EXISTS' below\n",
    "table=  \"\"\" CREATE TABLE IF NOT EXISTS Test2 (ID INTEGER PRIMARY KEY NOT NULL, \n",
    "        F_NAME VARCHAR(20), L_NAME VARCHAR(20), CITY VARCHAR(20), COUNTRY VARCHAR(20));\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sqlite3.Cursor at 0x1537dc3cbc0>"
      ]
     },
     "execution_count": 182,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cursor_obj.execute(table)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sqlite3.Cursor at 0x1537dc3cbc0>"
      ]
     },
     "execution_count": 183,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cursor_obj.execute('''  INSERT INTO Test2 VALUES(1, 'Seyed Alireza', 'Malih', 'Nice', 'France')   ''')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sqlite3.Cursor at 0x1537dc3cbc0>"
      ]
     },
     "execution_count": 184,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cursor_obj.execute('''  INSERT INTO Test2 VALUES(2, 'Hanna Sadat', 'Malih', 'Hamedan', 'Iran'), (3, 'Mir Hosseinn', 'Malih', 'Hamedan', 'Iran')   ''')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 'Seyed Alireza', 'Malih', 'Nice', 'France')\n",
      "(2, 'Hanna Sadat', 'Malih', 'Hamedan', 'Iran')\n",
      "(3, 'Mir Hosseinn', 'Malih', 'Hamedan', 'Iran')\n"
     ]
    }
   ],
   "source": [
    "# Here we are going to operate our table by cursor API \n",
    "statement= ''' SELECT * FROM Test2 '''\n",
    "cursor_obj.execute(statement)\n",
    "\n",
    "# Here we are going to \n",
    "output_all = cursor_obj.fetchall()\n",
    "for row in output_all:\n",
    "    print(row)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 'Seyed Alireza', 'Malih', 'Nice', 'France')\n",
      "(2, 'Hanna Sadat', 'Malih', 'Hamedan', 'Iran')\n"
     ]
    }
   ],
   "source": [
    "# Here we are going to operate our table by cursor API \n",
    "statement= ''' SELECT * FROM Test2 '''\n",
    "cursor_obj.execute(statement)\n",
    "  \n",
    "# Use fetchmany(numberofrows) and mention the number how many rows you want to fetch\n",
    "output_all = cursor_obj.fetchmany(2) \n",
    "for row in output_all:\n",
    "    print(row)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sqlite3.Cursor at 0x1537dc3cbc0>"
      ]
     },
     "execution_count": 195,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "query_update='''    UPDATE Test2 SET CITY='Paris' where F_NAME=\"Seyed Alireza\"  '''\n",
    "cursor_obj.execute(query_update)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 'Seyed Alireza', 'Malih', 'Paris', 'France')\n",
      "(2, 'Hanna Sadat', 'Malih', 'Hamedan', 'Iran')\n",
      "(3, 'Mir Hosseinn', 'Malih', 'Hamedan', 'Iran')\n"
     ]
    }
   ],
   "source": [
    "# Here we are going to operate our table by cursor API \n",
    "statement= ''' SELECT * FROM Test2 '''\n",
    "cursor_obj.execute(statement)\n",
    "\n",
    "# Here we are going to \n",
    "output_all = cursor_obj.fetchall()\n",
    "for row in output_all:\n",
    "    print(row)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>F_NAME</th>\n",
       "      <th>L_NAME</th>\n",
       "      <th>CITY</th>\n",
       "      <th>COUNTRY</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Seyed Alireza</td>\n",
       "      <td>Malih</td>\n",
       "      <td>Paris</td>\n",
       "      <td>France</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Hanna Sadat</td>\n",
       "      <td>Malih</td>\n",
       "      <td>Hamedan</td>\n",
       "      <td>Iran</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Mir Hosseinn</td>\n",
       "      <td>Malih</td>\n",
       "      <td>Hamedan</td>\n",
       "      <td>Iran</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ID         F_NAME L_NAME     CITY COUNTRY\n",
       "0   1  Seyed Alireza  Malih    Paris  France\n",
       "1   2    Hanna Sadat  Malih  Hamedan    Iran\n",
       "2   3   Mir Hosseinn  Malih  Hamedan    Iran"
      ]
     },
     "execution_count": 197,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Import libraries\n",
    "import pandas as pd\n",
    "\n",
    "# Retrieve the query results into a pandas dataframe\n",
    "df = pd.read_sql_query(\"SELECT * FROM Test2;\", conn)\n",
    "\n",
    "#print the dataframe\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Malih'"
      ]
     },
     "execution_count": 198,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#print just the LNAME for first row in the pandas data frame\n",
    "df.L_NAME[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3, 5)"
      ]
     },
     "execution_count": 199,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Close the connection\n",
    "conn.close()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
